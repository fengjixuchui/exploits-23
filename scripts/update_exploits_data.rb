#!/usr/bin/env ruby
# By Ramon de C Valle. This work is dedicated to the public domain.

require "nokogiri"
require "optparse"
require "time"
require "xmlsimple"
require "yaml"

Version = [0, 0, 1]
Release = nil

options = {}
OptionParser.new do |parser|
  parser.banner = "Usage: #{parser.program_name} [options] exploits.yml allitems-cvrf.xml"

  parser.separator("")
  parser.separator("Options:")

  parser.on("-h", "--help", "Show this message") do
    puts parser
    exit
  end

  parser.on("-i", "--in-place", "In-place mode") do |i|
    options[:in_place] = i
  end

  parser.on("-o", "--output FILE", "Output file") do |file|
    options[:file] = File.new(file, "w+b")
  end

  parser.on("-v", "--verbose", "Verbose mode") do |v|
    options[:verbose] = v
  end

  parser.on("--version", "Show version") do
    puts parser.ver
    exit
  end
end.parse!

file = options[:in_place] ? File.new(ARGV[0], "a+b") : (options[:file] || nil)

exploits = YAML.safe_load((options[:in_place] ? file : File.new(ARGV[0])).read)
seen = []
reader = Nokogiri::XML::Reader(File.new(ARGV[1]))
reader.each do |node|
  next unless node.name == "Vulnerability" && node.node_type == Nokogiri::XML::Reader::TYPE_ELEMENT
  vulnerability = XmlSimple.xml_in(node.outer_xml)
  exploit = exploits.find { |exploit| exploit["vulnerabilities"].include?(vulnerability["Title"][0]) }
  next if exploit.nil?
  vulnerability["Notes"][0]["Note"].each do |note|
    case note["Type"]
    when "Description"
      if seen.include?(exploit)
        exploit["description"] << " "
        exploit["description"] << note["content"].tr("\n", " ").gsub(/\s+/, " ").strip
      else
        exploit["description"] = note["content"].tr("\n", " ").gsub(/\s+/, " ").strip
      end
    end
  end
  seen << exploit
end

if file
  file.truncate(0)
  file.write(exploits.to_yaml)
  file.close
else
  puts exploits.to_yaml
end
